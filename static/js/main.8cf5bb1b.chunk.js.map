{"version":3,"sources":["logo.svg","contexts/editor.js","pages/HomePage/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EditorContext","React","createContext","HomePage","propTypes","msalConfig","auth","clientId","redirectUri","window","location","protocol","hostname","port","pathname","msalInstance","UserAgentApplication","handleRedirectCallback","error","response","getAccount","loginRedirect","scopes","initializeIcons","App","useState","context","selectedTab","setSelectedTab","useEffect","items","key","text","cacheKey","iconProps","iconName","subMenuProps","disabled","href","onClick","console","log","farItems","ariaLabel","iconOnly","overflowItems","Provider","value","Consumer","props","Pivot","onLinkClick","item","itemKey","selectedKey","PivotItem","headerText","CommandBar","path","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8cf5bb1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport React from \"react\";\n\nexport const EditorContext = React.createContext({ });\n\n","\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function HomePage() {\n  return (\n    <>\n    Home\n    </>\n  );\n}\n\nHomePage.propTypes = {\n\n}\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { EditorContext } from \"./contexts/editor\";\nimport { Router, Match, Location, navigate } from \"@reach/router\";\nimport HomePage from \"./pages/HomePage\";\nimport { UserAgentApplication } from \"msal\";\nimport { Label, ILabelStyles } from \"office-ui-fabric-react/lib/Label\";\nimport { Pivot, PivotItem } from \"office-ui-fabric-react/lib/Pivot\";\nimport {\n  CommandBar,\n  ICommandBarItemProps\n} from \"office-ui-fabric-react/lib/CommandBar\";\nimport { initializeIcons } from \"@uifabric/icons\";\nexport function getSearchParametersFromHRef(href) {\n  if (!href) return {};\n  var search = {};\n  var s1 = href.split(\"?\");\n  if (s1.length > 1) {\n    var s2 = s1[1].split(\"&\");\n    for (let index = 0; index < s2.length; index++) {\n      const s3 = s2[index].split(\"=\");\n      search[s3[0]] = decodeURIComponent(s3[1]);\n    }\n  }\n  return search;\n}\n\nexport function getSearchParametersFromHash(href) {\n  if (!href) return {};\n  var search = {};\n  var s1 = href.split(\"#\");\n  if (s1.length > 1) {\n    var s2 = s1[1].split(\"&\");\n    for (let index = 0; index < s2.length; index++) {\n      const s3 = s2[index].split(\"=\");\n      search[s3[0]] = decodeURIComponent(s3[1]);\n    }\n  }\n  return search;\n}\nfunction auth() {\n  var replyUrl =\n    window.location.protocol +\n    \"//\" +\n    window.location.hostname +\n    (window.location.port !== 80 &&\n    window.location.port !== 443 &&\n    window.location.port !== \"\"\n      ? \":\" + window.location.port\n      : \"\") +\n    window.location.pathname;\n\n  var msalConfig = {\n    auth: {\n      clientId: \"443ae28d-8cf8-42fd-ba63-f403ac085ead\",\n      redirectUri: replyUrl\n    }\n  };\n  var requestObj = {\n    scopes: [\"user.read\"]\n  };\n  var msalInstance = new UserAgentApplication(msalConfig);\n  msalInstance.handleRedirectCallback((error, response) => {\n    // handle redirect response or error\n  });\n  var PTO365 = {\n    user: msalInstance.getAccount()\n  };\n  if (!PTO365.user) {\n    msalInstance.loginRedirect(requestObj);\n  }\n}\n/**********************************************************************************************************\n * BOOT\n **********************************************************************************************************/\nauth();\ninitializeIcons();\n\nfunction App() {\n  const [context, setContext] = useState({});\n  const [selectedTab, setSelectedTab] = useState(\"home\");\n\n  useEffect(() => {}, []);\n  var items = [\n    {\n      key: \"newItem\",\n      text: \"New\",\n      cacheKey: \"myCacheKey\", // changing this key will invalidate this item's cache\n      iconProps: { iconName: \"Add\" },\n      subMenuProps: {\n        items: [\n          {\n            key: \"emailMessage\",\n            text: \"Email message\",\n            disabled: true,\n            iconProps: { iconName: \"Mail\" },\n            [\"data-automation-id\"]: \"newEmailButton\" // optional\n          },\n          {\n            key: \"calendarEvent\",\n            text: \"Calendar event\",\n            disabled: true,\n            iconProps: { iconName: \"Calendar\" }\n          }\n        ]\n      }\n    },\n    {\n      key: \"upload\",\n      text: \"Upload\",\n      disabled: true,\n      iconProps: { iconName: \"Upload\" },\n      href: \"https://dev.office.com/fabric\"\n    },\n    {\n      key: \"share\",\n      text: \"Share\",\n      disabled: true,\n      iconProps: { iconName: \"Share\" },\n      onClick: () => console.log(\"Share\")\n    },\n    {\n      key: \"download\",\n      text: \"Download\",\n      disabled: true,\n      iconProps: { iconName: \"Download\" },\n      onClick: () => console.log(\"Download\")\n    }\n  ];\n  var farItems = [\n    {\n      key: \"tile\",\n      text: \"Grid view\",\n      // This needs an ariaLabel since it's icon-only\n      ariaLabel: \"Grid view\",\n      iconOnly: true,\n      disabled: true,\n      iconProps: { iconName: \"Tiles\" },\n      onClick: () => console.log(\"Tiles\")\n    },\n    {\n      key: \"info\",\n      text: \"Info\",\n      // This needs an ariaLabel since it's icon-only\n      ariaLabel: \"Info\",\n      iconOnly: true,\n      iconProps: { iconName: \"Info\" },\n      onClick: () => console.log(\"Info\")\n    }\n  ];\n  var overflowItems = [\n    {\n      disabled: true,\n      key: \"move\",\n      text: \"Move to...\",\n      onClick: () => console.log(\"Move to\"),\n      iconProps: { iconName: \"MoveToFolder\" }\n    },\n    {\n      disabled: true,\n      key: \"copy\",\n      text: \"Copy to...\",\n      onClick: () => console.log(\"Copy to\"),\n      iconProps: { iconName: \"Copy\" }\n    },\n    {\n      disabled: true,\n      key: \"rename\",\n      text: \"Rename...\",\n      onClick: () => console.log(\"Rename\"),\n      iconProps: { iconName: \"Edit\" }\n    }\n  ];\n  return (\n    <div>\n      <EditorContext.Provider value={context}>\n        <EditorContext.Consumer>\n          {props => {\n            return (\n              <div>\n                <div>\n                  <Pivot\n                    onLinkClick={item => {\n                      setSelectedTab(item.props.itemKey);\n                    }}\n                    selectedKey={selectedTab}\n                  >\n                    <PivotItem headerText=\"My Publications\" itemKey=\"home\" />\n\n                    <PivotItem headerText=\"Edit\" itemKey=\"edit\" />\n                  </Pivot>\n                </div>\n                <div>\n                   {selectedTab} \n                  <CommandBar\n                    items={items}\n                    farItems={farItems}\n                    overflowItems={overflowItems}\n                  />\n                </div>\n              </div>\n            );\n          }}\n        </EditorContext.Consumer>\n\n        <Router>\n          <HomePage path=\"/\" />\n        </Router>\n      </EditorContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}